---
name: Publish Python 🐍 distributions 📦 to PyPI
on:
  push:
    tags:
      - "v*"
jobs:
  extract-tag:
    runs-on: ubuntu-latest
    if: github.repository_owner == 'gepa-ai'
    outputs:
      version: ${{ steps.extract_tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
      - id: extract_tag
        name: Extract tag name
        run: |
          # Extract tag and remove 'v' prefix to get semver
          TAG=$(echo $GITHUB_REF | cut -d / -f 3)
          VERSION=${TAG#v}
          echo "tag=$VERSION" >> "$GITHUB_OUTPUT"

  build-and-publish-test-pypi:
    needs: [extract-tag]
    if: github.repository_owner == 'gepa-ai'
    runs-on: ubuntu-latest
    environment:
      name: pypi
    permissions:
      id-token: write # IMPORTANT: mandatory for trusted publishing
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Set up latest uv
        uses: astral-sh/setup-uv@v6
        with:
          version: latest
      - name: Install build dependencies
        run: uv pip install ".[build]"
      - name: Get correct version for TestPyPI release
        id: check_version
        run: |
          VERSION=${{ needs.extract-tag.outputs.version }}  
          PACKAGE_NAME="gepa"
          echo "Checking if $VERSION for $PACKAGE_NAME exists on TestPyPI"  
          NEW_VERSION=$(python3 .github/workflows/build_utils/test_version.py $PACKAGE_NAME $VERSION)  
          echo "Version to be used for TestPyPI release: $NEW_VERSION"  
          echo "version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
      - name: Update version in pyproject.toml
        run: sed -i '/#replace_package_version_marker/{n;s/version="[^"]*"/version="${{ needs.extract-tag.outputs.version }}"/;}' pyproject.toml
      - name: Build a binary wheel
        run: uv run python -m build
      # Test the locally built wheel
      - name: Create test environment
        run: uv venv test_before_testpypi
      - name: Test package installation and functionality
        run: |
          source test_before_testpypi/bin/activate
          # Install the locally built wheel and testing dependencies
          WHEEL_FILE=$(ls dist/*.whl | head -1)
          uv pip install "$WHEEL_FILE[dev]" pytest
          pytest tests/
          deactivate
      # Publish to test-PyPI
      - name: Publish distribution 📦 to test-PyPI
        uses: pypa/gh-action-pypi-publish@release/v1 # This requires a trusted publisher to be setup in pypi/testpypi
        with:
          repository-url: https://test.pypi.org/legacy/

  # TODO: Add tests using gepa

  build-and-publish-pypi:
    needs: [extract-tag, build-and-publish-test-pypi]
    # Only publish to PyPI if the repository owner is gepa-ai and status checks pass
    if: github.repository_owner == 'gepa-ai'
    runs-on: ubuntu-latest
    environment:
      name: pypi
    permissions:
      id-token: write # IMPORTANT: mandatory for trusted publishing
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Set up latest uv
        uses: astral-sh/setup-uv@v6
        with:
          version: latest
      - name: Install build dependencies
        run: uv pip install ".[build]"
      - name: Get correct version for PyPI release
        id: check_version
        run: |
          VERSION=${{ needs.extract-tag.outputs.version }}  
          PACKAGE_NAME="gepa"
          echo "Checking if $VERSION for $PACKAGE_NAME exists on PyPI"  
          NEW_VERSION=$(python3 .github/workflows/build_utils/test_version.py $PACKAGE_NAME $VERSION)  
          echo "Version to be used for PyPI release: $NEW_VERSION"  
          echo "version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
      - name: Update version in pyproject.toml
        run: sed -i '/#replace_package_version_marker/{n;s/version="[^"]*"/version="${{ steps.check_version.outputs.version }}"/;}' pyproject.toml
      - name: Build a binary wheel
        run: uv run python -m build
      # Test the locally built wheel before publishing to pypi
      - name: Create test environment
        run: uv venv test_before_pypi
      - name: Test package installation and functionality
        run: |
          source test_before_pypi/bin/activate
          # Install the locally built wheel and testing dependencies
          WHEEL_FILE=$(ls dist/*.whl | head -1)
          uv pip install "$WHEEL_FILE[dev]" pytest
          pytest tests/
          deactivate
          rm -r test_before_pypi
      - name: Publish distribution 📦 to PyPI (gepa)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          attestations: false
      - uses: stefanzweifel/git-auto-commit-action@v5 # auto commit changes to main
        with:
          commit_message: Update versions
          create_branch: true
          branch: release-${{ needs.extract-tag.outputs.version }}
      - name: Checkout main branch
        run: |
          git fetch origin
          git checkout main
      - name: Configure git user
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "Github Actions"
      - name: Merge release branch into main
        run: |
          git merge --no-ff release-${{ needs.extract-tag.outputs.version }}
      - name: Push changes to main
        run: |
          git push origin main